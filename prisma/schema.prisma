// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  duels         Duel[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Duel {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  track1   Track   @relation("track1", fields: [track1Id], references: [id])
  track1Id String
  track2   Track   @relation("track2", fields: [track2Id], references: [id])
  track2Id String
  winner   Track?  @relation("winner", fields: [winnerId], references: [id])
  winnerId String?
  loser    Track?  @relation("loser", fields: [loserId], references: [id])
  loserId  String?
  userId   String
  user     User    @relation(fields: [userId], references: [id])
}

model Track {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  name       String
  imageUrl   String
  previewURL String

  winnerOf Duel[] @relation("winner")
  loserOf  Duel[] @relation("loser")
  duels    Duel[] @relation("track1")
  duels2   Duel[] @relation("track2")
}
